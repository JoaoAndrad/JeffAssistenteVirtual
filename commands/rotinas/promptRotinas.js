const moment = require("moment-timezone");
const { sendGroqChat } = require("../../routes/groq");

/**
 * Analisa uma mensagem de rotina usando Groq LLM e retorna os campos estruturados.
 * Se mencionar um dia numeral (ex: "dia 7 tenho que...") e n√£o for recorrente, agendar para o pr√≥ximo m√™s se o dia j√° passou.
 * Sempre retorna os campos: dayOrDate, time, message, type, repetition (quando aplic√°vel).
 * @param {string} texto
 * @returns {Promise<{dayOrDate: string, time: string, message: string, type: string, repetition?: string}|null>} Retorna os campos ou null se falhar
 */
async function analisarRotinaViaGroq(texto) {
    try {
        const saoPauloNow = moment.tz("America/Sao_Paulo");
        const dataAtual = saoPauloNow.format("YYYY-MM-DD");
        const horaAtual = saoPauloNow.format("HH:mm");
        const diaAtual = saoPauloNow.date();
        const mesAtual = saoPauloNow.month() + 1;
        const anoAtual = saoPauloNow.year();
        // Fun√ß√£o auxiliar para calcular pr√≥xima data para qualquer dia numeral
        function proximaDataNumeral(dia) {
            let diaNum = parseInt(dia, 10);
            if (isNaN(diaNum) || diaNum < 1 || diaNum > 31) return null;
            let data = moment.tz(`${anoAtual}-${mesAtual.toString().padStart(2, '0')}-${diaNum.toString().padStart(2, '0')}`, "YYYY-MM-DD", "America/Sao_Paulo");
            if (data.isBefore(saoPauloNow, 'day')) {
                data = data.add(1, 'month');
            }
            return data.format("YYYY-MM-DD");
        }
        const prompt = [
            `Hor√°rio atual em S√£o Paulo: ${dataAtual} ${horaAtual}`,
            "Sua tarefa √© extrair os campos estruturados da mensagem abaixo e convert√™-la em um lembrete, rotina ou alarme.",
            "Sempre responda SOMENTE em JSON v√°lido, sem explica√ß√µes, coment√°rios ou texto adicional.",
            "",
            "üß† Objetivo:",
            "- Interpretar mensagens em linguagem natural para estruturar lembretes, rotinas e alarmes com base no conte√∫do textual.",
            "üìÖ Regras para interpreta√ß√£o de datas:",
            "Se n√£o houver data expl√≠cita, use o dia atual.",
            "- Use o hor√°rio atual informado no topo para base de c√°lculo.",
            "- Quando houver datas no formato DD/MM ou DD/MM/YYYY, normalize para 'YYYY-MM-DD'.",
            "- Para dias da semana como 'ter√ßa-feira' 'ter√ßa' 'quarta-feira' 'pr√≥xima quarta' 'nessa quinta' 'essa quinta-feira', calcule a pr√≥xima ocorr√™ncia (nunca datas passadas).",
            "- Palavras como 'amanh√£', 'depois de amanh√£', 'semana que vem' devem ser convertidas para a data correta baseada em 'dataAtual'.",
            "",
            "‚è∞ Regras para interpreta√ß√£o de tempo:",
            "- Hor√°rios devem sempre ser convertidos para o formato 24h (ex: '8 da noite' -> '20:00').",
            "- Interpreta√ß√µes relativas como 'em 2 horas', 'daqui a 30 minutos' devem ser calculadas com base em horaAtual.",
            "- Se a mensagem n√£o tiver hor√°rio expl√≠cito nem relativo, defina: \"time\": \"\"",
            "",
            "üîÅ Regras para mensagens recorrentes:",
            "- Termos como 'todo', 'toda', 'sempre', 'diariamente', 'semanalmente', 'mensalmente' indicam repeti√ß√£o.",
            "- Use: type: 'repetitiva' e o campo repetition com: 'diariamente', 'semanalmente', 'mensalmente', etc.",
            "- Exemplo: 'todo s√°bado', repetition: 'semanalmente', dayOrDate: 's√°bado'",
            "- Repeti√ß√µes num√©ricas: 'todo dia 10' -> dayOrDate: '10', repetition: 'mensalmente' type: 'repetitiva'",
            "",
            "üßº Regras para o campo 'message':",
            "- Remova termos desnecess√°rios como: 'me lembra de', 'tenho que', 'preciso', 'vou', 'lembrar de', 'agendar', 'programar'.",
            "- Mantenha a descri√ß√£o limpa, direta e concisa.",
            "",
            "‚úÖ Quando usar o campo 'isTask':",
            "- Use \"isTask\": true para compromissos relevantes (reuni√µes, consultas, tomar rem√©dio, pagar contas, tarefas com a√ß√£o).",
            "- Evite usar para eventos informais (ex: 'ver filme', 'ir ao parque').",
            "",
            "üîî Detec√ß√£o de Alarmes:",
            "- Se a mensagem mencionar termos como 'alarme', 'acordar', 'despertar', 'despertador', 'tocar alarme', 'me acorde', 'me acorda', 'me desperte', classifique como um alarme.",
            "- Para alarmes, inclua o campo 'categoria': 'alarme' no JSON.",
            "- Alarmes podem ser √∫nicos ou recorrentes, conforme o texto.",
            "",
            "‚ö†Ô∏è Importante:",
            "- Sempre retorne campos com aspas duplas. Use estrutura JSON v√°lida.",
            "- Caso algum dado esteja ausente (ex: sem hor√°rio), ainda assim responda com os demais campos e time como \"\".",
            "- O campo 'Message' jamais pode ter informa√ß√µes que n√£o estejam na mensagem original, se atente a isso, revise duas vezes o contexto da mensagem para garantir que a mensagem ser√° devidamente retirada da frase, mesmo com os exemplos abaixo.",
            "",
            "üìö Exemplos de entrada e sa√≠da:",
            "",
            "Mensagem: 'dia 7 tenho que levar o carro no mec√¢nico' (e hoje √© dia 8 do mes)",
            "Resposta:",
            "{",
            `  "dayOrDate": "${proximaDataNumeral(7)}",`,
            '  "message": "levar o carro no mec√¢nico",',
            '  "type": "unica",',
            '  "isTask": true',
            "}",
            "",
            "Mensagem: 'amanh√£ √†s 14:30 reuni√£o com equipe'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(1, 'day').format('YYYY-MM-DD')}",`,
            '  "time": "14:30",',
            '  "message": "reuni√£o com equipe",',
            '  "type": "unica",',
            '  "isTask": true',
            "}",
            "",
            "Mensagem: 'todo dia 10 pagar o aluguel'",
            "Resposta:",
            "{",
            '  "dayOrDate": "10",',
            '  "message": "pagar o aluguel",',
            '  "type": "repetitiva",',
            '  "repetition": "mensalmente",',
            '  "isTask": true',
            "}",
            "",
            "Regras para alarmes:",
            "- Se o hor√°rio informado j√° passou no dia atual, agende para o pr√≥ximo dia.",
            "- Se tiver a palavra 'alarme', 'acordar', 'despertar', 'despertador', 'tocar alarme', 'me acorde', 'me acorda', 'me desperte', 'criar alarme' e etc classifique como um alarme.",
            "- Se for algo repetitivo (ex: \"todo dia\", \"todos os dias\"), defina:",
            "  - \"type\": \"repetitiva\"",
            "  - \"dayOrDate\": \"todos\"",
            "  - \"repetition\" como \"diariamente\"",
            "- Se for algo espec√≠fico (ex: \"dia 15\", \"daqui 3 dias\"), defina:",
            "  - \"type\": \"unica\"",
            "  - \"dayOrDate\" com a data no formato \"YYYY-MM-DD\"",
            "- Se for uma tarefa (ex: lembrar de fazer algo), adicione \"isTask\": true",
            "- Categorize sempre como \"categoria\": \"alarme\"",
            "Mensagem: 'criar alarme para tocar todo dia √†s 7:00 da manh√£'",
            "Resposta:",
            "{",
            "  \"dayOrDate\": \"todos\",",
            "  \"time\": \"07:00\",",
            "  \"message\": \"tocar alarme\",",
            "  \"type\": \"repetitiva\",",
            "  \"repetition\": \"diariamente\",",
            "  \"isTask\": false,",
            "  \"categoria\": \"alarme\"",
            "}",
            "Mensagem: 'Criar alarme para 08:00' (agora s√£o 06:00)",
            "Resposta:",
            "{",
            `  "dayOrDate": "${dataAtual}",`,
            "  \"time\": \"08:00\",",
            "  \"message\": \"alarme\",",
            "  \"type\": \"unica\",",
            "  \"isTask\": false,",
            "  \"categoria\": \"alarme\"",
            "}",
            "Mensagem : 'Criar alarme para ter√ßa feira √†s 19:00'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(3, 'days').format('YYYY-MM-DD')}",`,
            '  "time": "09:00",',
            '  "message": "alarme",',
            '  "type": "unica",',
            '  "isTask": false,',
            '  "categoria": "alarme"',
            "}",
            "Mensagem: 'Criar alarme para 14:00' (agora s√£o 19:00 de acordo com \"" + horaAtual + "\")",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(1, 'day').format('YYYY-MM-DD')}",`,
            "  \"time\": \"14:00\",",
            "  \"message\": \"alarme\",",
            "  \"type\": \"unica\",",
            "  \"isTask\": false,",
            "  \"categoria\": \"alarme\"",
            "}",

            "Mensagem: 'Faz um alarme para daqui 3 dias √†s 09:00'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(3, 'days').format('YYYY-MM-DD')}",`,
            "  \"time\": \"09:00\",",
            "  \"message\": \"alarme\",",
            "  \"type\": \"unica\",",
            "  \"isTask\": false,",
            "  \"categoria\": \"alarme\"",
            "}",

            "Mensagem: 'me lembre de comprar p√£o amanh√£ √†s 08:00 da manh√£'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(1, 'day').format('YYYY-MM-DD')}",`,
            "  \"time\": \"08:00\",",
            "  \"message\": \"comprar p√£o\",",
            "  \"type\": \"unica\",",
            "  \"isTask\": true,",
            "  \"categoria\": \"alarme\"",
            "}",

            "Mensagem: 'alarme para fazer o almo√ßo √†s 10:00 da manh√£'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${dataAtual}",`,
            "  \"time\": \"10:00\",",
            "  \"message\": \"fazer o almo√ßo\",",
            "  \"type\": \"unica\",",
            "  \"isTask\": false,",
            "  \"categoria\": \"alarme\"",
            "}",

            "Mensagem: 'crie um alarme para tomar √°gua √†s 15:00 todos os dias'",
            "Resposta:",
            "{",
            "  \"dayOrDate\": \"todos\",",
            "  \"time\": \"15:00\",",
            "  \"message\": \"tomar √°gua\",",
            "  \"type\": \"repetitiva\",",
            "  \"repetition\": \"diariamente\",",
            "  \"isTask\": true,",
            "  \"categoria\": \"alarme\"",
            "}",

            "Mensagem: 'preciso de um alarme para dia 15 para lembrar de mandar curriculo √†s 16:00'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().date(15).format('YYYY-MM-DD')}",`,
            "  \"time\": \"16:00\",",
            "  \"message\": \"mandar curriculo\",",
            "  \"type\": \"unica\",",
            "  \"isTask\": true,",
            "  \"categoria\": \"alarme\"",
            "}",

            "Mensagem: 'criar alarme para tocar todo dia √†s 7:00 da manh√£'",
            "Resposta:",
            "{",
            `  "dayOrDate": "todos",`,
            '  "time": "07:00",',
            '  "message": "tocar alarme",',
            '  "type": "repetitiva",',
            '  "repetition": "diariamente",',
            '  "isTask": false,',
            '  "categoria": "alarme"',
            "}",
            "Mensagem: 'Criar alarme para 08:00' (e ainda s√£o 06:00 em s√£o paulo de acordo com \"" + horaAtual + "\")",
            "Resposta:",
            "{",
            `  "dayOrDate": "${dataAtual}",`,
            '  "time": "08:00",',
            '  "message": "alarme",',
            '  "type": "unica",',
            '  "isTask": false,',
            '  "categoria": "alarme"',
            "}",
            "Mensagem: 'Faz um alarme para daqui 3 dias √†s 09:00'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(3, 'days').format('YYYY-MM-DD')}",`,
            '  "time": "09:00",',
            '  "message": "alarme",',
            '  "type": "unica",',
            '  "isTask": false,',
            '  "categoria": "alarme"',
            "}",
            "Mensagem: 'me lembre de comprar p√£o amanh√£ √†s 08:00 da manh√£'",
            "Mensagem: 'alarme para fazer o almo√ßo √†s 10:00 da manh√£'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${dataAtual}",`,
            '  "time": "10:00",',
            '  "message": "fazer o almo√ßo",',
            '  "type": "unica",',
            '  "categoria": "alarme"',
            "}",
            "Mensagem: 'crie um alarme para tomar √°gua √†s 15:00 todos os dias'",
            "Resposta:",
            "{",
            `  "dayOrDate": "todos",`,
            '  "time": "15:00",',
            '  "message": "tomar √°gua",',
            '  "type": "repetitiva",',
            '  "repetition": "diariamente",',
            '  "isTask": true,',
            '  "categoria": "alarme"',
            "}",
            "",
            "Mensagem: 'preciso de um alarme para dia 15 para lembrar de mandar curriculo √†s 16:00'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().date(15).format('YYYY-MM-DD')}",`,
            '  "time": "16:00",',
            '  "message": "mandar curriculo",',
            '  "type": "unica",',
            '  "isTask": true,',
            '  "categoria": "alarme"',
            "}",
            "Mensagem: 'daqui a 45 minutos ligar para o cliente'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(45, 'minutes').format('YYYY-MM-DD')}",`,
            `  "time": "${saoPauloNow.clone().add(45, 'minutes').format('HH:mm')}",`,
            '  "message": "ligar para o cliente",',
            '  "type": "unica",',
            '  "isTask": true',
            "}",
            "",
            "Mensagem: 'me lembra daqui a 20 minutos eu vou tomar caf√©'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(20, 'minutes').format('YYYY-MM-DD')}",`,
            `  "time": "${saoPauloNow.clone().add(20, 'minutes').format('HH:mm')}",`,
            '  "message": "tomar caf√©",',
            '  "type": "unica",',
            '  "isTask": true',
            "}",
            "",
            "Mensagem: 'daqui a 45 minutos ligar para o cliente'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(45, 'minutes').format('YYYY-MM-DD')}",`,
            `  "time": "${saoPauloNow.clone().add(45, 'minutes').format('HH:mm')}",`,
            '  "message": "ligar para o cliente",',
            '  "type": "unica",',
            '  "isTask": true',
            "}",
            "Mensagem: 'daqui 5 minutos enviar e-mail para o cliente'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(5, 'minutes').format('YYYY-MM-DD')}",`,
            `  "time": "${saoPauloNow.clone().add(5, 'minutes').format('HH:mm')}",`,
            '  "message": "ligar para o cliente",',
            '  "type": "unica",',
            '  "isTask": true',
            "}",

            "Mensagem: 'me lembra de tomar rem√©dio em 15 minutos'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(15, 'minutes').format('YYYY-MM-DD')}",`,
            `  "time": "${saoPauloNow.clone().add(15, 'minutes').format('HH:mm')}",`,
            '  "message": "tomar rem√©dio",',
            '  "type": "unica",',
            '  "isTask": true',
            "}",

            "Mensagem: 'me lembra que em 2 horas tenho que revisar o relat√≥rio'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(2, 'hours').format('YYYY-MM-DD')}",`,
            `  "time": "${saoPauloNow.clone().add(2, 'hours').format('HH:mm')}",`,
            '  "message": "revisar o relat√≥rio",',
            '  "type": "unica",',
            '  "isTask": true',
            "}",

            "Mensagem: 'em 5 horas sair para o aeroporto'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(5, 'hours').format('YYYY-MM-DD')}",`,
            `  "time": "${saoPauloNow.clone().add(5, 'hours').format('HH:mm')}",`,
            '  "message": "sair para o aeroporto",',
            '  "type": "unica",',
            '  "isTask": true',
            "}",

            "Mensagem: 'daqui 2 dias reuni√£o com a equipe'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(2, 'days').format('YYYY-MM-DD')}",`,
            '  "time": "",',
            '  "message": "reuni√£o com a equipe",',
            '  "type": "unica",',
            '  "isTask": true',
            "}",

            "Mensagem: 'daqui a 3 dias ir ao cinema'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(3, 'days').format('YYYY-MM-DD')}",`,
            '  "time": "",',
            '  "message": "ir ao cinema",',
            '  "type": "unica"',
            "}",
            "Mensagem: 'revisar o TCC daqui a 2 dias'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(2, 'days').format('YYYY-MM-DD')}",`,
            '  "time": "",',
            '  "message": "revisar o TCC",',
            '  "type": "unica",',
            '  "isTask": true',
            "}",
            "Mensagem: 'Amanh√£ √†s 10h pegar os exames'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(1, 'day').format('YYYY-MM-DD')}",`,
            '  "time": "10:00",',
            '  "message": "pegar os exames",',
            '  "type": "unica",',
            '  "isTask": true',
            "}",

            "Mensagem: 'Todo s√°bado √†s 18h ir √† academia'",
            "Resposta:",
            "{",
            '  "dayOrDate": "s√°bado",',
            '  "time": "18:00",',
            '  "message": "ir √† academia",',
            '  "type": "repetitiva",',
            '  "repetition": "semanalmente"',
            "}",

            "Mensagem: 'Me lembra de pagar o aluguel dia 10'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${proximaDataNumeral(10)}",`,
            '  "time": "",',
            '  "message": "pagar o aluguel",',
            '  "type": "unica",',
            '  "isTask": true',
            "}",

            "Mensagem: 'Daqui a 30 minutos ligar para o Jo√£o'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(30, 'minutes').format('YYYY-MM-DD')}",`,
            `  "time": "${saoPauloNow.clone().add(30, 'minutes').format('HH:mm')}",`,
            '  "message": "ligar para o Jo√£o",',
            '  "type": "unica",',
            "}",

            "Mensagem: 'Consulta m√©dica em 2 dias √†s 9h'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(2, 'days').format('YYYY-MM-DD')}",`,
            '  "time": "09:00",',
            '  "message": "consulta m√©dica",',
            '  "type": "unica",',
            '  "isTask": true',
            "}",
            "Mensagem: 'daqui uma semana entregar o projeto final'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(1, 'week').format('YYYY-MM-DD')}",`,
            '  "time": "",',
            '  "message": "entregar o projeto final",',
            '  "type": "unica",',
            '  "isTask": true',
            '  "isRelativeTime": true',
            "}",
            "Mensagem: 'em meia hora devo escovar os dentes'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(30, 'minutes').format('YYYY-MM-DD')}",`,
            `  "time": "${saoPauloNow.clone().add(30, 'minutes').format('HH:mm')}",`,
            '  "message": "escovar os dentes",',
            '  "type": "unica"',
            '  "isRelativeTime": true',
            "}",
            "Mensagem: 'em 40 minutos devo sair'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(40, 'minutes').format('YYYY-MM-DD')}",`,
            `  "time": "${saoPauloNow.clone().add(40, 'minutes').format('HH:mm')}",`,
            '  "message": "sair",',
            '  "type": "unica"',
            '  "isRelativeTime": true',
            "}",
            "Mensagem: 'daqui duas semanas consulta com dentista √†s 09:00'",
            "Resposta:",
            "{",
            `  "dayOrDate": "${saoPauloNow.clone().add(2, 'weeks').format('YYYY-MM-DD')}",`,
            '  "time": "09:00",',
            '  "message": "consulta com dentista",',
            '  "type": "unica",',
            '  "isTask": true',
            '  "isRelativeTime": true',
            "}",
            `Mensagem: "${texto}"`
        ].join('\n');


        const resposta = await sendGroqChat(prompt, {
            systemMessage: 'Voc√™ √© um extrator de campos para cria√ß√£o de rotinas/lembretes. Responda apenas em JSON com os campos dayOrDate, time, message, type, repetition, isRelativeTime.'
        });


        if (!resposta) return null;
        // Tentar extrair JSON da resposta
        const jsonMatch = resposta.match(/\{[\s\S]*\}/);
        if (!jsonMatch) return null;


        const data = JSON.parse(jsonMatch[0]);
        console.log(`[GROQ][rotina] analisarRotinaViaGroq detectou: ${JSON.stringify(data)}`);

        // Se Groq indicar que √© hor√°rio relativo, validar o c√°lculo
        if (data.isRelativeTime === true && data.time) {
            // Tenta extrair o valor relativo do texto
            const matchMin = texto.match(/(\d+)\s*minuto|minutos/i);
            const matchHour = texto.match(/(\d+)\s*hora|horas/i);
            let esperado;
            if (matchMin) {
                const min = parseInt(matchMin[1], 10);
                esperado = saoPauloNow.clone().add(min, 'minutes');
            } else if (matchHour) {
                const hr = parseInt(matchHour[1], 10);
                esperado = saoPauloNow.clone().add(hr, 'hours');
            }
            if (esperado) {
                // Verifica se o time retornado bate com o esperado
                const timeRetornado = moment.tz(`${data.dayOrDate} ${data.time}`, "YYYY-MM-DD HH:mm", "America/Sao_Paulo");
                const diff = Math.abs(esperado.diff(timeRetornado, 'minutes'));
                if (diff > 2) { // toler√¢ncia de 2 minutos
                    // Recalcula
                    data.dayOrDate = esperado.format('YYYY-MM-DD');
                    data.time = esperado.format('HH:mm');
                    console.log('[GROQ][rotina] Hor√°rio relativo ajustado:', data.dayOrDate, data.time);
                }
            }
        }

        // Ajuste para alarmes: se o hor√°rio j√° passou hoje, agendar para o pr√≥ximo dia
        let dayOrDate = data.dayOrDate?.toString().trim() || '';
        let time = data.time?.toString().trim() || '';
        // Se dayOrDate vier com hora, extrair s√≥ a data
        if (/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}$/.test(dayOrDate)) {
            dayOrDate = dayOrDate.split(' ')[0];
        }
        // Se dayOrDate for apenas um n√∫mero (ex: '10', '14') ou data tipo '10/07', '10-07', '2025-07-10' e j√° passou, agenda para o pr√≥ximo m√™s
        const hoje = saoPauloNow;
        // Num√©rico puro
        if (/^\d{1,2}$/.test(dayOrDate)) {
            const diaNum = parseInt(dayOrDate, 10);
            if (!isNaN(diaNum)) {
                // Monta data para este m√™s
                let dataTest = moment.tz(`${hoje.year()}-${(hoje.month()+1).toString().padStart(2, '0')}-${diaNum.toString().padStart(2, '0')}`, "YYYY-MM-DD", "America/Sao_Paulo");
                if (dataTest.isBefore(hoje, 'day')) {
                    // Agenda para o pr√≥ximo m√™s
                    const proximoMes = hoje.clone().add(1, 'month');
                    dayOrDate = proximoMes.year() + '-' + (proximoMes.month()+1).toString().padStart(2, '0') + '-' + diaNum.toString().padStart(2, '0');
                    console.log('[GROQ][rotina] Ajuste: dayOrDate num√©rico j√° passou, agendando para o pr√≥ximo m√™s:', dayOrDate);
                } else {
                    dayOrDate = dataTest.format('YYYY-MM-DD');
                }
            }
        }
        // Formatos tipo '10/07', '10-07', '2025-07-10'
        else if (/^(\d{1,2})[\/\-](\d{1,2})$/.test(dayOrDate)) {
            // Ex: '10/07' ou '10-07'
            const match = dayOrDate.match(/^(\d{1,2})[\/\-](\d{1,2})$/);
            if (match) {
                const diaNum = parseInt(match[1], 10);
                const mesNum = parseInt(match[2], 10);
                let dataTest = moment.tz(`${hoje.year()}-${mesNum.toString().padStart(2, '0')}-${diaNum.toString().padStart(2, '0')}`, "YYYY-MM-DD", "America/Sao_Paulo");
                if (dataTest.isBefore(hoje, 'day')) {
                    // Agenda para o pr√≥ximo m√™s
                    let proximoMes = dataTest.clone().add(1, 'month');
                    dayOrDate = proximoMes.format('YYYY-MM-DD');
                    console.log('[GROQ][rotina] Ajuste: dayOrDate tipo DD/MM ou DD-MM j√° passou, agendando para o pr√≥ximo m√™s:', dayOrDate);
                } else {
                    dayOrDate = dataTest.format('YYYY-MM-DD');
                }
            }
        }
        else if (/^\d{4}-\d{2}-\d{2}$/.test(dayOrDate)) {
            // Ex: '2025-07-10'
            let dataTest = moment.tz(dayOrDate, "YYYY-MM-DD", "America/Sao_Paulo");
            if (dataTest.isBefore(hoje, 'day')) {
                // Agenda para o pr√≥ximo m√™s
                let proximoMes = dataTest.clone().add(1, 'month');
                dayOrDate = proximoMes.format('YYYY-MM-DD');
                console.log('[GROQ][rotina] Ajuste: dayOrDate tipo YYYY-MM-DD j√° passou, agendando para o pr√≥ximo m√™s:', dayOrDate);
            }
        }
        if (data.categoria?.toString().trim() === 'alarme' && dayOrDate && time) {
            const now = saoPauloNow;
            const dataAlarme = moment.tz(`${dayOrDate} ${time}`, "YYYY-MM-DD HH:mm", "America/Sao_Paulo");
            if (dataAlarme.isBefore(now)) {
                // Se o hor√°rio j√° passou hoje, agendar para o pr√≥ximo dia
                dayOrDate = now.clone().add(1, 'day').format('YYYY-MM-DD');
                console.log('[GROQ][rotina] Ajuste: hor√°rio de alarme j√° passou, agendando para o pr√≥ximo dia:', dayOrDate, time);
            }
        }
        return {
            dayOrDate,
            time,
            message: data.message?.toString().trim() || '',
            type: data.type?.toString().trim() || 'unica',
            repetition: data.repetition?.toString().trim() || undefined,
            isTask: typeof data.isTask === 'boolean' ? data.isTask : undefined,
            categoria: data.categoria?.toString().trim() || 'lembrete'
        };
    } catch (e) {
        console.warn(`[GROQ][rotina] Falha ao analisar rotina: ${e.message}`);
        return null;
    }
}

module.exports = { analisarRotinaViaGroq };
